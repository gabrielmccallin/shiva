import Promise from 'promise-polyfill';
import { ContainerConfig, ResponsiveConfig } from './ContainerConfig';
import { EventDispatcher } from './EventDispatcher';
import { StyleDeclaration } from './StyleDeclaration';
import { TransitionFromToConfig } from './TransitionFromToConfig';
import { TransitionToConfig } from './TransitionToConfig';
export declare class Container extends EventDispatcher {
    static TRANSITION_COMPLETE: string;
    private _element;
    private _data;
    private transitions;
    private timeoutsArray;
    private responsiveRules;
    constructor(config?: ContainerConfig);
    readonly timeouts: Array<number>;
    killAnimations(): void;
    addToBody(): void;
    style(vars: StyleDeclaration): void;
    className(...names: string[]): void;
    appendChild(child: Container): void;
    addChild(child: Container): void;
    removeChild(child: Container): void;
    to(config: TransitionToConfig): Promise<Container>;
    private convertTransitionStyleToObject(style);
    private convertTransitionObjectToString(transition);
    private removeCompletedTransitionsAndReapply(toVars);
    fromTo(config: TransitionFromToConfig): Promise<Container>;
    private camelToHyphen(camel);
    private hyphenToCamel(hyphen);
    addEventListener(scope: any, typeStr: string, listenerFunc: Function, data?: any, useCapture?: boolean): void;
    removeEventListener(typeStr: string, listenerFunc: Function): {};
    preventDefault(e: any): void;
    responsive(config: ResponsiveConfig | ResponsiveConfig[]): void;
    private addResizeListener();
    private resizeHandler(e);
    private calculateResponsiveStyles(width, rule, mergedRules?);
    width: number;
    height: number;
    y: number;
    x: number;
    alpha: number;
    data: any;
    innerText: string;
    hide(): void;
    show(): void;
    fillContainer(): void;
    centreHorizontal(): void;
    centreHorizontalText(): void;
    private shadow();
    private dimensionsPolyfill();
    value: string;
    id: string;
    readonly element: HTMLElement;
    innerHtml: string;
    href: string;
}
