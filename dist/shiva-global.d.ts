declare module shiva {
// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../promise-polyfill



export class Anchor extends Container {
    constructor(config: AnchorConfig);
}

export interface AnchorConfig extends ContainerConfig {
    href?: any;
}

export class Button extends Container {
    static CLICK: string;
    constructor(config?: ButtonConfig);
    over(): void;
    out(): void;
    click(): void;
    disable(): void;
    select(): void;
    enable(): void;
    style(style: ButtonStyleDeclaration): void;
}

export interface ButtonConfig extends ContainerConfig, HoverStyleDeclaration {
    style?: ButtonStyleDeclaration;
    styles?: ButtonStyleDeclaration[];
}

export interface ButtonStyleDeclaration extends StyleDeclaration {
    hover?: HoverStyle;
}

export class CheckBox extends Container {
    static CLICK: string;
    constructor(config?: InputConfig);
    readonly checked: boolean;
}

export class Container extends EventDispatcher {
    static TRANSITION_COMPLETE: string;
    constructor(config?: ContainerConfig);
    readonly timeouts: Array<number>;
    killAnimations(): void;
    addToBody(): void;
    style(vars: StyleDeclaration): void;
    className(...names: string[]): void;
    appendChild(child: Container): void;
    addChild(child: Container): void;
    removeChild(child: Container): void;
    to(config: TransitionToConfig): Promise<Container>;
    fromTo(config: TransitionFromToConfig): Promise<Container>;
    addEventListener(scope: any, typeStr: string, listenerFunc: Function, data?: any, useCapture?: boolean): void;
    removeEventListener(typeStr: string, listenerFunc: Function): {};
    preventDefault(e: any): void;
    responsive(config: ResponsiveConfig | ResponsiveConfig[]): void;
    width: number;
    height: number;
    y: number;
    x: number;
    alpha: number;
    data: any;
    innerText: string;
    hide(): void;
    show(): void;
    fillContainer(): void;
    centreHorizontal(): void;
    centreHorizontalText(): void;
    value: string;
    id: string;
    readonly element: HTMLElement;
    innerHtml: string;
    href: string;
}

export interface ContainerConfig extends StyleDeclaration {
    root?: boolean;
    id?: string;
    type?: string;
    style?: StyleDeclaration;
    styles?: StyleDeclaration[];
    text?: string;
    data?: any;
    className?: string | string[];
    attributes?: {};
    responsive?: ResponsiveConfig | ResponsiveConfig[];
}
export interface ResponsiveConfig {
    minWidth?: number;
    maxWidth?: number;
    style: StyleDeclaration;
    duration?: number;
}

export class Dimensions {
    width: number;
    height: number;
    constructor(width: number, height: number);
}

export class DropDown extends Container {
    static CHANGE: string;
    constructor(config: DropDownConfig);
    itemOver(e: Event): void;
    itemOut(e: Event): void;
    disable(): void;
    enable(): void;
}

export interface DropDownConfig extends ContainerConfig {
    options: string[];
    style?: DropStyleDeclaration;
    styles?: DropStyleDeclaration[];
}

export interface DropStyleDeclaration extends HoverStyleDeclaration {
    durationExpand?: number;
    durationContract?: number;
    button?: HoverStyleDeclaration;
    item?: HoverStyleDeclaration;
    caret?: StyleDeclaration;
    dropGap?: string;
}

export class Ease {
    static Linear: string;
    static Ease: string;
    static EaseIn: string;
    static EaseOut: string;
    static EaseInOut: string;
}

export class Event {
    constructor(type: string, targetObj: any, data?: any, sourceEvent?: any);
    readonly target: Container;
    readonly type: string;
    data: any;
    readonly sourceEvent: any;
}
export class EventDispatcher {
    hasEventListener(type: string, listener: Function): Boolean;
    addEventListener(scope: any, typeStr: string, listenerFunc: Function, data?: any, useCapture?: boolean, scopedEventListener?: Function): void;
    removeEventListener(typeStr: string, listenerFunc: Function): {};
    dispatchEvent(evt: Event): void;
}

export interface HoverStyle {
    backgroundColor?: string;
    color?: string;
    durationIn?: number;
    durationOut?: number;
}

export interface HoverStyleDeclaration extends StyleDeclaration {
    hover?: HoverStyle;
}

export class Image extends Container {
    static COMPLETE: string;
    static ERROR: string;
    constructor(config?: ImageConfig);
    load(src: string): void;
}

export interface ImageConfig extends ContainerConfig {
    path?: any;
    src?: any;
}

export interface InputConfig extends StyleDeclaration {
    id?: string;
    style?: StyleDeclaration;
    checked?: boolean;
}

export type LoaderHTTPMethods = "GET" | "PUT" | "POST" | "DELETE" | "UPDATE";
export class Loader extends EventDispatcher {
    static httpMethods: {
        GET: LoaderHTTPMethods;
        PUT: LoaderHTTPMethods;
        POST: LoaderHTTPMethods;
        DELETE: LoaderHTTPMethods;
        UPDATE: LoaderHTTPMethods;
    };
    static COMPLETE: string;
    static ERROR: string;
    static get(config: LoaderConfig): Promise<any>;
    static post(config: LoaderConfig): Promise<any>;
    static put(config: LoaderConfig): Promise<any>;
    static update(config: LoaderConfig): Promise<any>;
    static delete(config: LoaderConfig): Promise<any>;
}

export interface LoaderConfig {
    url: string;
    params?: any;
    headers?: Array<any>;
    cache?: boolean;
    data?: any;
}

export class LoaderEvent extends Event {
    constructor(type: string, targetObj: any, response: any, status: any, httpMetaData: any, data?: any, sourceEvent?: any);
    readonly response: string;
    readonly status: string;
    readonly httpMetaData: any;
}

export class ObjectUtils {
    static merge(target?: any, source?: any): any;
}

export class Observer {
    static addEventListener(scope: any, type: string, callback: Function): void;
    static removeEventListener(type: string, callback: Function): void;
    static dispatchEvent(evt: Event): void;
}

export interface Page extends Container {
    wake(): any;
    sleep(): any;
}

export class Pages extends Container {
    constructor(config: PagesConfig);
    update(page: string): void;
    changePage(page: string): void;
}

export interface PagesConfig {
    pages: {};
    id?: string;
    style?: StyleDeclaration;
    delayTransition?: number;
    routes?: boolean;
    errorPage?: string;
    redirect?: boolean;
}

export class Properties {
    static style(object: any, vars: StyleDeclaration): void;
}

export class RadioButton extends Container {
    static CLICK: string;
    constructor(config?: InputConfig);
    readonly checked: boolean;
}

export interface Dimension {
    width: number;
    height: number;
}
export class Resize {
    static proportionalOutside(source: Dimension, target: Dimension): {
        height: number;
        width: number;
    };
    static proportionalInside(source: Dimension, target: Dimension): Object;
}

export class RootContainer extends Container {
    constructor();
}

export class Select extends Container {
    static CHANGE: string;
    constructor(config: SelectConfig);
    value: string;
    selectedIndex: number;
    options: Array<{
        value: string;
        text: string;
    }>;
}

export interface SelectConfig extends ContainerConfig {
    name?: string;
    options: {
        value: string;
        text: string;
    }[];
}

export class ShivaEvent {
    constructor(type: string, targetObj: any, data?: any, sourceEvent?: any);
    readonly target: Container;
    readonly type: string;
    data: any;
    readonly sourceEvent: any;
}

export interface StyleDeclaration {
    alignContent?: string;
    alignItems?: string;
    alignSelf?: string;
    alignmentBaseline?: string;
    animation?: string;
    animationDelay?: string;
    animationDirection?: string;
    animationDuration?: string;
    animationFillMode?: string;
    animationIterationCount?: string;
    animationName?: string;
    animationPlayState?: string;
    animationTimingFunction?: string;
    backfaceVisibility?: string;
    background?: string;
    backgroundAttachment?: string;
    backgroundClip?: string;
    backgroundColor?: string;
    backgroundImage?: string;
    backgroundOrigin?: string;
    backgroundPosition?: string;
    backgroundPositionX?: string;
    backgroundPositionY?: string;
    backgroundRepeat?: string;
    backgroundSize?: string;
    baselineShift?: string;
    border?: string;
    borderBottom?: string;
    borderBottomColor?: string;
    borderBottomLeftRadius?: string;
    borderBottomRightRadius?: string;
    borderBottomStyle?: string;
    borderBottomWidth?: string;
    borderCollapse?: string;
    borderColor?: string;
    borderImage?: string;
    borderImageOutset?: string;
    borderImageRepeat?: string;
    borderImageSlice?: string;
    borderImageSource?: string;
    borderImageWidth?: string;
    borderLeft?: string;
    borderLeftColor?: string;
    borderLeftStyle?: string;
    borderLeftWidth?: string;
    borderRadius?: string;
    borderRight?: string;
    borderRightColor?: string;
    borderRightStyle?: string;
    borderRightWidth?: string;
    borderSpacing?: string;
    borderStyle?: string;
    borderTop?: string;
    borderTopColor?: string;
    borderTopLeftRadius?: string;
    borderTopRightRadius?: string;
    borderTopStyle?: string;
    borderTopWidth?: string;
    borderWidth?: string;
    bottom?: string;
    boxShadow?: string;
    boxSizing?: string;
    breakAfter?: string;
    breakBefore?: string;
    breakInside?: string;
    captionSide?: string;
    clear?: string;
    clip?: string;
    clipPath?: string;
    clipRule?: string;
    color?: string;
    colorInterpolationFilters?: string;
    columnCount?: any;
    columnFill?: string;
    columnGap?: any;
    columnRule?: string;
    columnRuleColor?: any;
    columnRuleStyle?: string;
    columnRuleWidth?: any;
    columnSpan?: string;
    columnWidth?: any;
    columns?: string;
    content?: string;
    counterIncrement?: string;
    counterReset?: string;
    cssFloat?: string;
    cssText?: string;
    cursor?: string;
    direction?: string;
    display?: string;
    dominantBaseline?: string;
    emptyCells?: string;
    enableBackground?: string;
    fill?: string;
    fillOpacity?: string;
    fillRule?: string;
    filter?: string;
    flex?: string;
    flexBasis?: string;
    flexDirection?: string;
    flexFlow?: string;
    flexGrow?: string;
    flexShrink?: string;
    flexWrap?: string;
    floodColor?: string;
    floodOpacity?: string;
    font?: string;
    fontFamily?: string;
    fontFeatureSettings?: string;
    fontSize?: string;
    fontSizeAdjust?: string;
    fontStretch?: string;
    fontStyle?: string;
    fontVariant?: string;
    fontWeight?: string;
    glyphOrientationHorizontal?: string;
    glyphOrientationVertical?: string;
    height?: any;
    imeMode?: string;
    justifyContent?: string;
    kerning?: string;
    left?: string;
    length?: number;
    letterSpacing?: string;
    lightingColor?: string;
    lineHeight?: string;
    listStyle?: string;
    listStyleImage?: string;
    listStylePosition?: string;
    listStyleType?: string;
    margin?: any;
    marginBottom?: string;
    marginLeft?: string;
    marginRight?: string;
    marginTop?: string;
    marker?: string;
    markerEnd?: string;
    markerMid?: string;
    markerStart?: string;
    mask?: string;
    maxHeight?: string;
    maxWidth?: string;
    minHeight?: string;
    minWidth?: string;
    msContentZoomChaining?: string;
    msContentZoomLimit?: string;
    msContentZoomLimitMax?: any;
    msContentZoomLimitMin?: any;
    msContentZoomSnap?: string;
    msContentZoomSnapPoints?: string;
    msContentZoomSnapType?: string;
    msContentZooming?: string;
    msFlowFrom?: string;
    msFlowInto?: string;
    msFontFeatureSettings?: string;
    msGridColumn?: any;
    msGridColumnAlign?: string;
    msGridColumnSpan?: any;
    msGridColumns?: string;
    msGridRow?: any;
    msGridRowAlign?: string;
    msGridRowSpan?: any;
    msGridRows?: string;
    msHighContrastAdjust?: string;
    msHyphenateLimitChars?: string;
    msHyphenateLimitLines?: any;
    msHyphenateLimitZone?: any;
    msHyphens?: string;
    msImeAlign?: string;
    msOverflowStyle?: string;
    msScrollChaining?: string;
    msScrollLimit?: string;
    msScrollLimitXMax?: any;
    msScrollLimitXMin?: any;
    msScrollLimitYMax?: any;
    msScrollLimitYMin?: any;
    msScrollRails?: string;
    msScrollSnapPointsX?: string;
    msScrollSnapPointsY?: string;
    msScrollSnapType?: string;
    msScrollSnapX?: string;
    msScrollSnapY?: string;
    msScrollTranslation?: string;
    msTextCombineHorizontal?: string;
    msTextSizeAdjust?: any;
    msTouchAction?: string;
    msTouchSelect?: string;
    msUserSelect?: string;
    msWrapFlow?: string;
    msWrapMargin?: any;
    msWrapThrough?: string;
    opacity?: string;
    order?: string;
    orphans?: string;
    outline?: string;
    outlineColor?: string;
    outlineStyle?: string;
    outlineWidth?: string;
    overflow?: string;
    overflowX?: string;
    overflowY?: string;
    padding?: string;
    paddingBottom?: string;
    paddingLeft?: string;
    paddingRight?: string;
    paddingTop?: string;
    pageBreakAfter?: string;
    pageBreakBefore?: string;
    pageBreakInside?: string;
    parentRule?: CSSRule;
    perspective?: string;
    perspectiveOrigin?: string;
    pointerEvents?: string;
    position?: string;
    quotes?: string;
    right?: string;
    rubyAlign?: string;
    rubyOverhang?: string;
    rubyPosition?: string;
    stopColor?: string;
    stopOpacity?: string;
    stroke?: string;
    strokeDasharray?: string;
    strokeDashoffset?: string;
    strokeLinecap?: string;
    strokeLinejoin?: string;
    strokeMiterlimit?: string;
    strokeOpacity?: string;
    strokeWidth?: string;
    tableLayout?: string;
    textAlign?: string;
    textAlignLast?: string;
    textAnchor?: string;
    textDecoration?: string;
    textFillColor?: string;
    textIndent?: string;
    textJustify?: string;
    textKashida?: string;
    textKashidaSpace?: string;
    textOverflow?: string;
    textShadow?: string;
    textTransform?: string;
    textUnderlinePosition?: string;
    top?: string;
    touchAction?: string;
    transform?: string;
    transformOrigin?: string;
    transformStyle?: string;
    transition?: string;
    transitionDelay?: string;
    transitionDuration?: string;
    transitionProperty?: string;
    transitionTimingFunction?: string;
    unicodeBidi?: string;
    verticalAlign?: string;
    visibility?: string;
    webkitAlignContent?: string;
    webkitAlignItems?: string;
    webkitAlignSelf?: string;
    webkitAnimation?: string;
    webkitAnimationDelay?: string;
    webkitAnimationDirection?: string;
    webkitAnimationDuration?: string;
    webkitAnimationFillMode?: string;
    webkitAnimationIterationCount?: string;
    webkitAnimationName?: string;
    webkitAnimationPlayState?: string;
    webkitAnimationTimingFunction?: string;
    webkitAppearance?: string;
    webkitBackfaceVisibility?: string;
    webkitBackground?: string;
    webkitBackgroundAttachment?: string;
    webkitBackgroundClip?: string;
    webkitBackgroundColor?: string;
    webkitBackgroundImage?: string;
    webkitBackgroundOrigin?: string;
    webkitBackgroundPosition?: string;
    webkitBackgroundPositionX?: string;
    webkitBackgroundPositionY?: string;
    webkitBackgroundRepeat?: string;
    webkitBackgroundSize?: string;
    webkitBorderBottomLeftRadius?: string;
    webkitBorderBottomRightRadius?: string;
    webkitBorderImage?: string;
    webkitBorderImageOutset?: string;
    webkitBorderImageRepeat?: string;
    webkitBorderImageSlice?: string;
    webkitBorderImageSource?: string;
    webkitBorderImageWidth?: string;
    webkitBorderRadius?: string;
    webkitBorderTopLeftRadius?: string;
    webkitBorderTopRightRadius?: string;
    webkitBoxAlign?: string;
    webkitBoxDirection?: string;
    webkitBoxFlex?: string;
    webkitBoxOrdinalGroup?: string;
    webkitBoxOrient?: string;
    webkitBoxPack?: string;
    webkitBoxSizing?: string;
    webkitColumnBreakAfter?: string;
    webkitColumnBreakBefore?: string;
    webkitColumnBreakInside?: string;
    webkitColumnCount?: any;
    webkitColumnGap?: any;
    webkitColumnRule?: string;
    webkitColumnRuleColor?: any;
    webkitColumnRuleStyle?: string;
    webkitColumnRuleWidth?: any;
    webkitColumnSpan?: string;
    webkitColumnWidth?: any;
    webkitColumns?: string;
    webkitFilter?: string;
    webkitFlex?: string;
    webkitFlexBasis?: string;
    webkitFlexDirection?: string;
    webkitFlexFlow?: string;
    webkitFlexGrow?: string;
    webkitFlexShrink?: string;
    webkitFlexWrap?: string;
    webkitJustifyContent?: string;
    webkitOrder?: string;
    webkitPerspective?: string;
    webkitPerspectiveOrigin?: string;
    webkitTapHighlightColor?: string;
    webkitTextFillColor?: string;
    webkitTextSizeAdjust?: any;
    webkitTransform?: string;
    webkitTransformOrigin?: string;
    webkitTransformStyle?: string;
    webkitTransition?: string;
    webkitTransitionDelay?: string;
    webkitTransitionDuration?: string;
    webkitTransitionProperty?: string;
    webkitTransitionTimingFunction?: string;
    webkitUserSelect?: string;
    webkitWritingMode?: string;
    whiteSpace?: string;
    widows?: string;
    width?: string | Number;
    wordBreak?: string;
    wordSpacing?: string;
    wordWrap?: string;
    writingMode?: string;
    zIndex?: string;
    zoom?: string;
    y?: number;
    x?: number;
    alpha?: number;
    webkitBoxShadow?: string;
    float?: Float;
}
export type Float = "left" | "right" | "none" | "inherit" | "initial" | "unset";
export type Display = "block" | "inline" | "inline-block" | "table" | "flex" | "grid" | "list-item" | "table-row-group" | "table-header-group" | "table-footer-group" | "table-row" | "table-cell" | "table-column-group" | "table-column" | "table-caption" | "none" | "inline-list-item" | "inline-table" | "inline-flex" | "inline-grid" | "none" | "inherit" | "initial" | "unset";

export class Styles {
    static button: {
        whiteSpace: string;
        msTouchAction: string;
        touchAction: string;
        cursor: string;
        webkitUserSelect: string;
        mozUserSelect: string;
        msUserSelect: string;
        userSelect: string;
        text: string;
        icon: {
            padding: string;
        };
        type: string;
        attributes: {
            type: string;
        };
    };
    static drop: {
        fontFamily: string;
        fontSize: string;
        backgroundColor: string;
        color: string;
        padding: string;
        durationExpand: number;
        durationContract: number;
        border: string;
        borderColor: string;
        dropGap: string;
        hover: {
            backgroundColor: string;
            color: string;
            durationIn: number;
            durationOut: number;
        };
        caret: {
            width: string;
            height: string;
            borderLeftWidth: string;
            borderLeftStyle: string;
            borderLeftColor: string;
            borderRightWidth: string;
            borderRightStyle: string;
            borderRightColor: string;
            borderTopWidth: string;
            borderTopStyle: string;
            borderTopColor: string;
            display: string;
            verticalAlign: string;
            marginLeft: string;
            pointerEvents: string;
            transform: string;
        };
    };
}

export interface TransitionFromToConfig extends TransitionToConfig {
    fromVars: StyleDeclaration;
}

export interface TransitionToConfig {
    duration: number;
    toVars: StyleDeclaration;
    ease?: Ease;
    delay?: number;
    immediateRender?: boolean;
    resolve?: Function;
}

export class Window {
    static scrollY(): number;
    static scrollX(): number;
    static readonly height: number;
    static readonly width: number;
}


}